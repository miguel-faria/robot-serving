// Generated by gencpp from file robot_serving/Cups.msg
// DO NOT EDIT!


#ifndef ROBOT_SERVING_MESSAGE_CUPS_H
#define ROBOT_SERVING_MESSAGE_CUPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_serving
{
template <class ContainerAllocator>
struct Cups_
{
  typedef Cups_<ContainerAllocator> Type;

  Cups_()
    : n_cups(0)
    , cups_color()
    , cups_pos_x()
    , cups_pos_y()
    , cups_pos_z()
    , depth_width(0)
    , depth_height(0)  {
    }
  Cups_(const ContainerAllocator& _alloc)
    : n_cups(0)
    , cups_color(_alloc)
    , cups_pos_x(_alloc)
    , cups_pos_y(_alloc)
    , cups_pos_z(_alloc)
    , depth_width(0)
    , depth_height(0)  {
  (void)_alloc;
    }



   typedef uint32_t _n_cups_type;
  _n_cups_type n_cups;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _cups_color_type;
  _cups_color_type cups_color;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cups_pos_x_type;
  _cups_pos_x_type cups_pos_x;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cups_pos_y_type;
  _cups_pos_y_type cups_pos_y;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cups_pos_z_type;
  _cups_pos_z_type cups_pos_z;

   typedef int32_t _depth_width_type;
  _depth_width_type depth_width;

   typedef int32_t _depth_height_type;
  _depth_height_type depth_height;




  typedef boost::shared_ptr< ::robot_serving::Cups_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_serving::Cups_<ContainerAllocator> const> ConstPtr;

}; // struct Cups_

typedef ::robot_serving::Cups_<std::allocator<void> > Cups;

typedef boost::shared_ptr< ::robot_serving::Cups > CupsPtr;
typedef boost::shared_ptr< ::robot_serving::Cups const> CupsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_serving::Cups_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_serving::Cups_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_serving

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robot_serving': ['/home/miguel/catkin_ws/src/robot_serving/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_serving::Cups_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_serving::Cups_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_serving::Cups_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_serving::Cups_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_serving::Cups_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_serving::Cups_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_serving::Cups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a9d0ae4758d926f4f7c5e0d4fe36472";
  }

  static const char* value(const ::robot_serving::Cups_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a9d0ae4758d926fULL;
  static const uint64_t static_value2 = 0x4f7c5e0d4fe36472ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_serving::Cups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_serving/Cups";
  }

  static const char* value(const ::robot_serving::Cups_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_serving::Cups_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains information about the position of n colored cups\n\
uint32 		n_cups 		#number of cups recorded in the workspace\n\
string[] 	cups_color 	#vector with the designations given to each cup\n\
float32[] 	cups_pos_x 	#this is a n matrix with the x position of each cup (in millimeters)\n\
float32[] 	cups_pos_y 	#this is a n matrix with the y position of each cup (in millimeters)\n\
float32[] 	cups_pos_z 	#this is a n matrix with the z position of each cup (in millimeters)\n\
int32 		depth_width 	#this is the width of the depth image (in pixels)\n\
int32 		depth_height 	#this is the height of the depth image (in pixels) \n\
";
  }

  static const char* value(const ::robot_serving::Cups_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_serving::Cups_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_cups);
      stream.next(m.cups_color);
      stream.next(m.cups_pos_x);
      stream.next(m.cups_pos_y);
      stream.next(m.cups_pos_z);
      stream.next(m.depth_width);
      stream.next(m.depth_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Cups_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_serving::Cups_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_serving::Cups_<ContainerAllocator>& v)
  {
    s << indent << "n_cups: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.n_cups);
    s << indent << "cups_color[]" << std::endl;
    for (size_t i = 0; i < v.cups_color.size(); ++i)
    {
      s << indent << "  cups_color[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cups_color[i]);
    }
    s << indent << "cups_pos_x[]" << std::endl;
    for (size_t i = 0; i < v.cups_pos_x.size(); ++i)
    {
      s << indent << "  cups_pos_x[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cups_pos_x[i]);
    }
    s << indent << "cups_pos_y[]" << std::endl;
    for (size_t i = 0; i < v.cups_pos_y.size(); ++i)
    {
      s << indent << "  cups_pos_y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cups_pos_y[i]);
    }
    s << indent << "cups_pos_z[]" << std::endl;
    for (size_t i = 0; i < v.cups_pos_z.size(); ++i)
    {
      s << indent << "  cups_pos_z[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cups_pos_z[i]);
    }
    s << indent << "depth_width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.depth_width);
    s << indent << "depth_height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.depth_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SERVING_MESSAGE_CUPS_H
