// Generated by gencpp from file robot_serving/PMPTraj.msg
// DO NOT EDIT!


#ifndef ROBOT_SERVING_MESSAGE_PMPTRAJ_H
#define ROBOT_SERVING_MESSAGE_PMPTRAJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_serving/PMPPoint.h>

namespace robot_serving
{
template <class ContainerAllocator>
struct PMPTraj_
{
  typedef PMPTraj_<ContainerAllocator> Type;

  PMPTraj_()
    : traj()
    , time_step()  {
    }
  PMPTraj_(const ContainerAllocator& _alloc)
    : traj(_alloc)
    , time_step(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_serving::PMPPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::robot_serving::PMPPoint_<ContainerAllocator> >::other >  _traj_type;
  _traj_type traj;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _time_step_type;
  _time_step_type time_step;




  typedef boost::shared_ptr< ::robot_serving::PMPTraj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_serving::PMPTraj_<ContainerAllocator> const> ConstPtr;

}; // struct PMPTraj_

typedef ::robot_serving::PMPTraj_<std::allocator<void> > PMPTraj;

typedef boost::shared_ptr< ::robot_serving::PMPTraj > PMPTrajPtr;
typedef boost::shared_ptr< ::robot_serving::PMPTraj const> PMPTrajConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_serving::PMPTraj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_serving::PMPTraj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_serving

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'robot_serving': ['/home/miguel/catkin_ws/src/robot_serving/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_serving::PMPTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_serving::PMPTraj_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_serving::PMPTraj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_serving::PMPTraj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_serving::PMPTraj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_serving::PMPTraj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_serving::PMPTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35272ff336131608380eedb24f1d6824";
  }

  static const char* value(const ::robot_serving::PMPTraj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35272ff336131608ULL;
  static const uint64_t static_value2 = 0x380eedb24f1d6824ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_serving::PMPTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_serving/PMPTraj";
  }

  static const char* value(const ::robot_serving::PMPTraj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_serving::PMPTraj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ROS message for a PMP trajectory. each entry of traj and time_step must have the same length\n\
PMPPoint[] 	traj		# vector, of the same size as the robot's DOFs, with the sequence of joint values at each time step for each DOF.\n\
float64[] 	time_step	# times of observations, in seconds, starting at zero\n\
================================================================================\n\
MSG: robot_serving/PMPPoint\n\
# Value of joint angles for one DOF\n\
float64[] 	joint_angles 	# sequence of angle values for one joint\n\
";
  }

  static const char* value(const ::robot_serving::PMPTraj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_serving::PMPTraj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.traj);
      stream.next(m.time_step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PMPTraj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_serving::PMPTraj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_serving::PMPTraj_<ContainerAllocator>& v)
  {
    s << indent << "traj[]" << std::endl;
    for (size_t i = 0; i < v.traj.size(); ++i)
    {
      s << indent << "  traj[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_serving::PMPPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.traj[i]);
    }
    s << indent << "time_step[]" << std::endl;
    for (size_t i = 0; i < v.time_step.size(); ++i)
    {
      s << indent << "  time_step[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.time_step[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SERVING_MESSAGE_PMPTRAJ_H
