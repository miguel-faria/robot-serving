# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_serving/Cups.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Cups(genpy.Message):
  _md5sum = "3a9d0ae4758d926f4f7c5e0d4fe36472"
  _type = "robot_serving/Cups"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message contains information about the position of n colored cups
uint32 		n_cups 		#number of cups recorded in the workspace
string[] 	cups_color 	#vector with the designations given to each cup
float32[] 	cups_pos_x 	#this is a n matrix with the x position of each cup (in millimeters)
float32[] 	cups_pos_y 	#this is a n matrix with the y position of each cup (in millimeters)
float32[] 	cups_pos_z 	#this is a n matrix with the z position of each cup (in millimeters)
int32 		depth_width 	#this is the width of the depth image (in pixels)
int32 		depth_height 	#this is the height of the depth image (in pixels) """
  __slots__ = ['n_cups','cups_color','cups_pos_x','cups_pos_y','cups_pos_z','depth_width','depth_height']
  _slot_types = ['uint32','string[]','float32[]','float32[]','float32[]','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       n_cups,cups_color,cups_pos_x,cups_pos_y,cups_pos_z,depth_width,depth_height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Cups, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.n_cups is None:
        self.n_cups = 0
      if self.cups_color is None:
        self.cups_color = []
      if self.cups_pos_x is None:
        self.cups_pos_x = []
      if self.cups_pos_y is None:
        self.cups_pos_y = []
      if self.cups_pos_z is None:
        self.cups_pos_z = []
      if self.depth_width is None:
        self.depth_width = 0
      if self.depth_height is None:
        self.depth_height = 0
    else:
      self.n_cups = 0
      self.cups_color = []
      self.cups_pos_x = []
      self.cups_pos_y = []
      self.cups_pos_z = []
      self.depth_width = 0
      self.depth_height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.n_cups))
      length = len(self.cups_color)
      buff.write(_struct_I.pack(length))
      for val1 in self.cups_color:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cups_pos_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cups_pos_x))
      length = len(self.cups_pos_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cups_pos_y))
      length = len(self.cups_pos_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cups_pos_z))
      _x = self
      buff.write(_struct_2i.pack(_x.depth_width, _x.depth_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.n_cups,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cups_color = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.cups_color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_z = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.depth_width, _x.depth_height,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.n_cups))
      length = len(self.cups_color)
      buff.write(_struct_I.pack(length))
      for val1 in self.cups_color:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.cups_pos_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cups_pos_x.tostring())
      length = len(self.cups_pos_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cups_pos_y.tostring())
      length = len(self.cups_pos_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cups_pos_z.tostring())
      _x = self
      buff.write(_struct_2i.pack(_x.depth_width, _x.depth_height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.n_cups,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.cups_color = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.cups_color.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cups_pos_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.depth_width, _x.depth_height,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
